// Code generated by protoc-gen-go. DO NOT EDIT.
// source: littlejp.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b9c5e776b46e42, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type StatusReply struct {
	Amount               float32  `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusReply) Reset()         { *m = StatusReply{} }
func (m *StatusReply) String() string { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()    {}
func (*StatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b9c5e776b46e42, []int{1}
}

func (m *StatusReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusReply.Unmarshal(m, b)
}
func (m *StatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusReply.Marshal(b, m, deterministic)
}
func (m *StatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusReply.Merge(m, src)
}
func (m *StatusReply) XXX_Size() int {
	return xxx_messageInfo_StatusReply.Size(m)
}
func (m *StatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_StatusReply proto.InternalMessageInfo

func (m *StatusReply) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ThrowRequest struct {
	Amount               float32  `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThrowRequest) Reset()         { *m = ThrowRequest{} }
func (m *ThrowRequest) String() string { return proto.CompactTextString(m) }
func (*ThrowRequest) ProtoMessage()    {}
func (*ThrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b9c5e776b46e42, []int{2}
}

func (m *ThrowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThrowRequest.Unmarshal(m, b)
}
func (m *ThrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThrowRequest.Marshal(b, m, deterministic)
}
func (m *ThrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThrowRequest.Merge(m, src)
}
func (m *ThrowRequest) XXX_Size() int {
	return xxx_messageInfo_ThrowRequest.Size(m)
}
func (m *ThrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThrowRequest proto.InternalMessageInfo

func (m *ThrowRequest) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ThrowReply struct {
	Amount               float32  `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	IsWinner             bool     `protobuf:"varint,2,opt,name=is_winner,json=isWinner,proto3" json:"is_winner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThrowReply) Reset()         { *m = ThrowReply{} }
func (m *ThrowReply) String() string { return proto.CompactTextString(m) }
func (*ThrowReply) ProtoMessage()    {}
func (*ThrowReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b9c5e776b46e42, []int{3}
}

func (m *ThrowReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThrowReply.Unmarshal(m, b)
}
func (m *ThrowReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThrowReply.Marshal(b, m, deterministic)
}
func (m *ThrowReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThrowReply.Merge(m, src)
}
func (m *ThrowReply) XXX_Size() int {
	return xxx_messageInfo_ThrowReply.Size(m)
}
func (m *ThrowReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ThrowReply.DiscardUnknown(m)
}

var xxx_messageInfo_ThrowReply proto.InternalMessageInfo

func (m *ThrowReply) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ThrowReply) GetIsWinner() bool {
	if m != nil {
		return m.IsWinner
	}
	return false
}

type WinnerRecoard struct {
	Winner               string               `protobuf:"bytes,1,opt,name=winner,proto3" json:"winner,omitempty"`
	Amount               float32              `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	WinAt                *timestamp.Timestamp `protobuf:"bytes,3,opt,name=win_at,json=winAt,proto3" json:"win_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WinnerRecoard) Reset()         { *m = WinnerRecoard{} }
func (m *WinnerRecoard) String() string { return proto.CompactTextString(m) }
func (*WinnerRecoard) ProtoMessage()    {}
func (*WinnerRecoard) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b9c5e776b46e42, []int{4}
}

func (m *WinnerRecoard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WinnerRecoard.Unmarshal(m, b)
}
func (m *WinnerRecoard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WinnerRecoard.Marshal(b, m, deterministic)
}
func (m *WinnerRecoard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WinnerRecoard.Merge(m, src)
}
func (m *WinnerRecoard) XXX_Size() int {
	return xxx_messageInfo_WinnerRecoard.Size(m)
}
func (m *WinnerRecoard) XXX_DiscardUnknown() {
	xxx_messageInfo_WinnerRecoard.DiscardUnknown(m)
}

var xxx_messageInfo_WinnerRecoard proto.InternalMessageInfo

func (m *WinnerRecoard) GetWinner() string {
	if m != nil {
		return m.Winner
	}
	return ""
}

func (m *WinnerRecoard) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *WinnerRecoard) GetWinAt() *timestamp.Timestamp {
	if m != nil {
		return m.WinAt
	}
	return nil
}

type WinnerHistory struct {
	Recoreds             []*WinnerRecoard `protobuf:"bytes,1,rep,name=recoreds,proto3" json:"recoreds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *WinnerHistory) Reset()         { *m = WinnerHistory{} }
func (m *WinnerHistory) String() string { return proto.CompactTextString(m) }
func (*WinnerHistory) ProtoMessage()    {}
func (*WinnerHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b9c5e776b46e42, []int{5}
}

func (m *WinnerHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WinnerHistory.Unmarshal(m, b)
}
func (m *WinnerHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WinnerHistory.Marshal(b, m, deterministic)
}
func (m *WinnerHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WinnerHistory.Merge(m, src)
}
func (m *WinnerHistory) XXX_Size() int {
	return xxx_messageInfo_WinnerHistory.Size(m)
}
func (m *WinnerHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_WinnerHistory.DiscardUnknown(m)
}

var xxx_messageInfo_WinnerHistory proto.InternalMessageInfo

func (m *WinnerHistory) GetRecoreds() []*WinnerRecoard {
	if m != nil {
		return m.Recoreds
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "proto.Empty")
	proto.RegisterType((*StatusReply)(nil), "proto.StatusReply")
	proto.RegisterType((*ThrowRequest)(nil), "proto.ThrowRequest")
	proto.RegisterType((*ThrowReply)(nil), "proto.ThrowReply")
	proto.RegisterType((*WinnerRecoard)(nil), "proto.WinnerRecoard")
	proto.RegisterType((*WinnerHistory)(nil), "proto.WinnerHistory")
}

func init() { proto.RegisterFile("littlejp.proto", fileDescriptor_76b9c5e776b46e42) }

var fileDescriptor_76b9c5e776b46e42 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4f, 0xea, 0x40,
	0x14, 0x85, 0x29, 0xa4, 0x3c, 0x7a, 0xe1, 0xbd, 0x3c, 0x47, 0x63, 0x9a, 0xba, 0xb0, 0x69, 0xa2,
	0xe9, 0xaa, 0x08, 0x6e, 0xdc, 0xb2, 0x30, 0x18, 0x57, 0x66, 0x20, 0x71, 0x49, 0x0a, 0x5c, 0x71,
	0x4c, 0xdb, 0xa9, 0x33, 0xb7, 0x12, 0x7e, 0x92, 0xff, 0xd2, 0x30, 0x1d, 0x0c, 0x5d, 0xe8, 0xaa,
	0x3d, 0x77, 0xce, 0x3d, 0xf7, 0xe4, 0x83, 0x7f, 0x99, 0x20, 0xca, 0xf0, 0xad, 0x4c, 0x4a, 0x25,
	0x49, 0x32, 0xd7, 0x7c, 0x82, 0xcb, 0x8d, 0x94, 0x9b, 0x0c, 0x87, 0x46, 0x2d, 0xab, 0x97, 0x21,
	0x89, 0x1c, 0x35, 0xa5, 0xb9, 0xf5, 0x45, 0x7f, 0xc0, 0xbd, 0xcf, 0x4b, 0xda, 0x45, 0x57, 0xd0,
	0x9f, 0x51, 0x4a, 0x95, 0xe6, 0x58, 0x66, 0x3b, 0x76, 0x0e, 0xdd, 0x34, 0x97, 0x55, 0x41, 0xbe,
	0x13, 0x3a, 0x71, 0x9b, 0x5b, 0x15, 0x5d, 0xc3, 0x60, 0xfe, 0xaa, 0xe4, 0x96, 0xe3, 0x7b, 0x85,
	0x9a, 0x7e, 0xf4, 0x4d, 0x00, 0xac, 0xef, 0x97, 0x34, 0x76, 0x01, 0x9e, 0xd0, 0x8b, 0xad, 0x28,
	0x0a, 0x54, 0x7e, 0x3b, 0x74, 0xe2, 0x1e, 0xef, 0x09, 0xfd, 0x6c, 0x74, 0xa4, 0xe0, 0x6f, 0xfd,
	0xc7, 0x71, 0x25, 0x53, 0xb5, 0xde, 0xa7, 0x58, 0xeb, 0x3e, 0xc5, 0xe3, 0x56, 0x1d, 0xa5, 0xb7,
	0x1b, 0xe9, 0x23, 0xe3, 0x5f, 0xa4, 0xe4, 0x77, 0x42, 0x27, 0xee, 0x8f, 0x83, 0xa4, 0xa6, 0x91,
	0x1c, 0x68, 0x24, 0xf3, 0x03, 0x0d, 0xee, 0x6e, 0x45, 0x31, 0xd9, 0xd7, 0xb6, 0x37, 0x1f, 0x84,
	0x26, 0xa9, 0x76, 0xec, 0x06, 0x7a, 0x0a, 0x57, 0x52, 0xe1, 0x5a, 0xfb, 0x4e, 0xd8, 0x89, 0xfb,
	0xe3, 0xb3, 0x7a, 0x3d, 0x69, 0x74, 0xe3, 0xdf, 0xae, 0xf1, 0xa7, 0x03, 0xde, 0xe3, 0xd3, 0x0c,
	0xd5, 0x87, 0x58, 0x21, 0x1b, 0x82, 0x37, 0x45, 0xaa, 0xc9, 0xb2, 0x81, 0x5d, 0x35, 0xc4, 0x03,
	0x66, 0xd5, 0x11, 0xf6, 0xa8, 0xc5, 0x46, 0xe0, 0x1a, 0x70, 0xec, 0xd4, 0x3e, 0x1f, 0xe3, 0x0e,
	0x4e, 0x9a, 0xc3, 0x7a, 0xe5, 0x0e, 0xfe, 0x4f, 0x91, 0x9a, 0xbd, 0x9b, 0xa7, 0x9a, 0x9d, 0xad,
	0x27, 0x6a, 0x2d, 0xbb, 0x66, 0x7c, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x3e, 0x56, 0x8a,
	0x3e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JPServiceClient is the client API for JPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JPServiceClient interface {
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error)
	Throw(ctx context.Context, in *ThrowRequest, opts ...grpc.CallOption) (*ThrowReply, error)
	GetWinnerHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WinnerHistory, error)
}

type jPServiceClient struct {
	cc *grpc.ClientConn
}

func NewJPServiceClient(cc *grpc.ClientConn) JPServiceClient {
	return &jPServiceClient{cc}
}

func (c *jPServiceClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/proto.JPService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jPServiceClient) Throw(ctx context.Context, in *ThrowRequest, opts ...grpc.CallOption) (*ThrowReply, error) {
	out := new(ThrowReply)
	err := c.cc.Invoke(ctx, "/proto.JPService/Throw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jPServiceClient) GetWinnerHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WinnerHistory, error) {
	out := new(WinnerHistory)
	err := c.cc.Invoke(ctx, "/proto.JPService/GetWinnerHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JPServiceServer is the server API for JPService service.
type JPServiceServer interface {
	GetStatus(context.Context, *Empty) (*StatusReply, error)
	Throw(context.Context, *ThrowRequest) (*ThrowReply, error)
	GetWinnerHistory(context.Context, *Empty) (*WinnerHistory, error)
}

func RegisterJPServiceServer(s *grpc.Server, srv JPServiceServer) {
	s.RegisterService(&_JPService_serviceDesc, srv)
}

func _JPService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JPServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JPService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JPServiceServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JPService_Throw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JPServiceServer).Throw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JPService/Throw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JPServiceServer).Throw(ctx, req.(*ThrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JPService_GetWinnerHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JPServiceServer).GetWinnerHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JPService/GetWinnerHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JPServiceServer).GetWinnerHistory(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _JPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JPService",
	HandlerType: (*JPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _JPService_GetStatus_Handler,
		},
		{
			MethodName: "Throw",
			Handler:    _JPService_Throw_Handler,
		},
		{
			MethodName: "GetWinnerHistory",
			Handler:    _JPService_GetWinnerHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "littlejp.proto",
}
